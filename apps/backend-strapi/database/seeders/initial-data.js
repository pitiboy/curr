'use strict';

/**
 * Initial data seeder for CURR system
 * Seeds basic data when database is empty
 */

module.exports = {
  /**
   * An asynchronous register function that runs before
   * your application is initialized.
   *
   * This gives you an opportunity to extend code.
   */
  register(/*{ strapi }*/) {},

  /**
   * An asynchronous bootstrap function that runs before
   * your application gets started.
   *
   * This gives you an opportunity to set up your data model,
   * run jobs, or perform some special logic.
   */
  async bootstrap({ strapi }) {
    // Only run seeding in development or when explicitly requested
    if (process.env.NODE_ENV === 'production' && !process.env.FORCE_SEED) {
      console.log(
        'üå± Skipping seeding in production (set FORCE_SEED=true to override)'
      );
      return;
    }

    console.log('üå± Starting initial data seeding...');

    try {
      // Seed Organization
      await seedOrganization(strapi);

      // Seed Transaction Types
      await seedTransactionTypes(strapi);

      // Seed Divisions
      await seedDivisions(strapi);

      // Seed Currency Types
      await seedCurrencyTypes(strapi);

      console.log('‚úÖ Initial data seeding completed successfully!');
    } catch (error) {
      console.error('‚ùå Error during seeding:', error);
      // Don't throw error to prevent app startup failure
    }
  },
};

async function seedOrganization(strapi) {
  const existingOrgs = await strapi.entityService.findMany(
    'api::organization.organization'
  );

  if (existingOrgs.length === 0) {
    console.log('üìä Seeding Organization...');

    const org = await strapi.entityService.create(
      'api::organization.organization',
      {
        data: {
          name: 'Z√∂ld forr√°sok sz√∂vetkezet @Szupatak',
          description: '',
          address: 'Szupatak, Hungary',
        },
      }
    );

    console.log(`‚úÖ Created organization: ${org.name}`);
  } else {
    console.log('üìä Organization already exists, skipping...');
  }
}

async function seedTransactionTypes(strapi) {
  const existingTypes = await strapi.entityService.findMany(
    'api::transaction-type.transaction-type'
  );

  if (existingTypes.length === 0) {
    console.log('üí∞ Seeding Transaction Types...');

    const transactionTypes = [
      {
        name: 'Elrendelt',
        category: 'future',
        description: 'Tervezett/elrendelt kiad√°s',
      },
      {
        name: 'Utal√°s',
        category: 'actual',
        description: 'Banki √°tutal√°s',
      },
      {
        name: 'K√©szp√©nz',
        category: 'actual',
        description: 'K√©szp√©nzes fizet√©s',
      },
      {
        name: '√Åtvezet√©s',
        category: 'internal',
        description: 'Bels≈ë √°tvezet√©s sz√°ml√°k k√∂z√∂tt',
      },
      {
        name: 'Jutal√©k',
        category: 'actual',
        description: 'Jutal√©k vagy b√≥nusz kifizet√©s',
      },
      {
        name: 'Barter',
        category: 'actual',
        description: '√Åru/szolg√°ltat√°s csere',
      },
    ];

    for (const type of transactionTypes) {
      await strapi.entityService.create(
        'api::transaction-type.transaction-type',
        {
          data: type,
        }
      );
    }

    console.log(`‚úÖ Created ${transactionTypes.length} transaction types`);
  } else {
    console.log('üí∞ Transaction types already exist, skipping...');
  }
}

async function seedDivisions(strapi) {
  const existingDivisions = await strapi.entityService.findMany(
    'api::division.division'
  );

  if (existingDivisions.length === 0) {
    console.log('üè¢ Seeding Divisions...');

    // Get the organization first
    const orgs = await strapi.entityService.findMany(
      'api::organization.organization',
      {
        limit: 1,
      }
    );

    let organizationId = null;
    if (orgs.length > 0) {
      organizationId = orgs[0].id;
      console.log(
        `üîó Linking divisions to organization: ${orgs[0].name} (ID: ${organizationId})`
      );
    } else {
      console.log(
        '‚ö†Ô∏è No organization found, divisions will be seeded without an organization link.'
      );
    }

    const divisions = [
      {
        name: '1.1. IR√ÅNY√çT√ÅS √âS SZEM√âLYZETI K√ñZPONT',
        description: 'Vezet√©s √©s szem√©lyzeti √ºgyek k√∂zpontja',
        organization: organizationId,
      },
      {
        name: '1.2. KOMMUNIK√ÅCI√ìS K√ñZPONT',
        description: 'A szervezet kommunik√°ci√≥s tev√©kenys√©geinek k√∂zpontja',
        organization: organizationId,
      },
      {
        name: '1.2.2 KIMEN≈ê KOMMUNIK√ÅCI√ìS K√ñZPONT',
        description: 'Kifel√© ir√°nyul√≥ kommunik√°ci√≥√©rt felel≈ës k√∂zpont',
        organization: organizationId,
      },
      {
        name: '1.2.3 BELS≈ê KOMMUNIK√ÅCI√ìS K√ñZPONT',
        description: 'Bels≈ë kommunik√°ci√≥√©rt felel≈ës k√∂zpont',
        organization: organizationId,
      },
      {
        name: '1.3 VIZSG√ÅLATOK √âS JELENT√âSEK',
        description: 'Vizsg√°latok √©s jelent√©sek k√©sz√≠t√©s√©nek k√∂zpontja',
        organization: organizationId,
      },
      {
        name: '2.4 PROM√ìCI√ì √âS MARKETING IGAZGAT√ìS√ÅG',
        description: 'Prom√≥ci√≥s √©s marketing tev√©kenys√©gek igazgat√≥s√°ga',
        organization: organizationId,
      },
      {
        name: '2.5 KIADV√ÅNYOK',
        description: 'Kiadv√°nyok szerkeszt√©se √©s terjeszt√©se',
        organization: organizationId,
      },
      {
        name: '2.6. REGISZTR√ÅCI√ìS K√ñZPONT',
        description: 'Tagok √©s adatok regisztr√°ci√≥j√°nak k√∂zpontja',
        organization: organizationId,
      },
      {
        name: '3.7 BEV√âTELI K√ñZPONT',
        description: 'Bev√©telek kezel√©s√©nek √©s gy≈±jt√©s√©nek k√∂zpontja',
        organization: organizationId,
      },
      {
        name: '3.8 KIFIZET√âSI K√ñZPONT',
        description: 'Kifizet√©sek kezel√©s√©nek √©s lebonyol√≠t√°s√°nak k√∂zpontja',
        organization: organizationId,
      },
      {
        name: '3.9 NYILV√ÅNTART√ÅSOK, VAGYONT√ÅRGYAK',
        description: 'Nyilv√°ntart√°sok √©s vagyont√°rgyak kezel√©se',
        organization: organizationId,
      },
      {
        name: '4.10 TERVEZ√âSI K√ñZPONT',
        description: 'Strat√©giai √©s operat√≠v tervez√©s k√∂zpontja',
        organization: organizationId,
      },
      {
        name: '4.11 TER√úLET KIALAK√çT√ÅS',
        description: 'Ter√ºletek fejleszt√©se √©s kialak√≠t√°sa',
        organization: organizationId,
      },
      {
        name: '4.12 TERMEL√âS IR√ÅNY√çT√ÅS',
        description: 'Termel√©si folyamatok ir√°ny√≠t√°sa √©s fel√ºgyelete',
        organization: organizationId,
      },
      {
        name: '4.12.1 MEZ≈ê- √âS ERD≈êGAZD√ÅLKOD√ÅS',
        description: 'Mez≈ëgazdas√°gi √©s erd≈ëgazd√°lkod√°si tev√©kenys√©gek',
        organization: organizationId,
      },
      {
        name: '5.13 √âRV√âNYES√çT√âS',
        description: 'Szab√°lyok √©s elj√°r√°sok √©rv√©nyes√≠t√©se',
        organization: organizationId,
      },
      {
        name: '5.14 MUNKAT√ÅRS FEJLESZT√âS',
        description: 'Munkat√°rsak k√©pz√©se √©s fejleszt√©se',
        organization: organizationId,
      },
      {
        name: '5.15 KORREKCI√ìS K√ñZPONT',
        description: 'Hib√°k √©s elt√©r√©sek korrekci√≥j√°nak k√∂zpontja',
        organization: organizationId,
      },
      {
        name: '6.A KAPCSOLATFELV√âTEL',
        description: 'K√ºls≈ë √©s bels≈ë kapcsolatfelv√©tel kezel√©se',
        organization: organizationId,
      },
      {
        name: '6.B TER√úLETI T√ÅMOGAT√ÅS',
        description: 'Ter√ºleti egys√©gek t√°mogat√°sa √©s koordin√°l√°sa',
        organization: organizationId,
      },
      {
        name: '6.C TER√úLETEK FEL√úGYELETe',
        description: 'Ter√ºleti tev√©kenys√©gek fel√ºgyelete √©s ellen≈ërz√©se',
        organization: organizationId,
      },
    ];

    for (const division of divisions) {
      await strapi.entityService.create('api::division.division', {
        data: division,
      });
    }

    console.log(`‚úÖ Created ${divisions.length} divisions`);
  } else {
    console.log('üè¢ Divisions already exist, skipping...');
  }
}

async function seedCurrencyTypes(strapi) {
  const existingCurrencies = await strapi.entityService.findMany(
    'api::currency-type.currency-type'
  );

  if (existingCurrencies.length === 0) {
    console.log('üí± Seeding Currency Types...');

    const currencyTypes = [
      {
        code: 'HUF',
        name: 'Magyar Forint',
        category: 'cash',
        unit: 'HUF',
      },
      {
        code: 'EUR',
        name: 'Euro',
        category: 'cash',
        unit: 'EUR',
      },
      {
        code: 'HOUR',
        name: 'emberi munka√≥ra',
        category: 'labor',
        unit: 'hour',
      },
    ];

    for (const currency of currencyTypes) {
      await strapi.entityService.create('api::currency-type.currency-type', {
        data: currency,
      });
    }

    console.log(`‚úÖ Created ${currencyTypes.length} currency types`);
  } else {
    console.log('üí± Currency types already exist, skipping...');
  }
}
