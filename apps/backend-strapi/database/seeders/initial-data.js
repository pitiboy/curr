'use strict';

/**
 * Initial data seeder for CURR system
 * Seeds basic data when database is empty
 */

module.exports = {
  /**
   * An asynchronous register function that runs before
   * your application is initialized.
   *
   /**
    * Manual seeding function - call this explicitly when you want to seed
    */
  async seed({ strapi }) {
    console.log('üå± Starting manual initial data seeding...');

    try {
      // Seed Transaction Types
      await seedTransactionTypes(strapi);

      // Seed Currency Categories
      await seedCurrencyCategories(strapi);

      // Seed Currency Types
      await seedCurrencyTypes(strapi);

      // Seed Account Categories
      await seedAccountCategories(strapi);

      // Seed Organization
      await seedOrganization(strapi);

      console.log('‚úÖ Manual seeding completed successfully!');
    } catch (error) {
      console.error('‚ùå Error during manual seeding:', error);
      throw error; // Re-throw for manual seeding
    }
  },
};

async function seedOrganization(strapi) {
  const existingOrgs = await strapi.entityService.findMany(
    'api::organization.organization'
  );

  if (existingOrgs.length === 0) {
    console.log('üìä Seeding Organization...');

    const org = await strapi.entityService.create(
      'api::organization.organization',
      {
        data: {
          name: 'Z√∂ld forr√°sok sz√∂vetkezet @Szupatak',
          description: '',
          address: 'Szupatak, Hungary',
        },
      }
    );

    console.log(`‚úÖ Created organization: ${org.name}`);
  } else {
    console.log('üìä Organization already exists, skipping...');
  }
}

async function seedTransactionTypes(strapi) {
  const existingTypes = await strapi.entityService.findMany(
    'api::transaction-type.transaction-type'
  );

  if (existingTypes.length === 0) {
    console.log('üí∞ Seeding Transaction Types...');

    const transactionTypes = [
      {
        name: 'Elrendelt',
        category: 'expense',
        description: 'Tervezett/elrendelt kiad√°s',
      },
      {
        name: 'Utal√°s',
        category: 'transfer',
        description: 'Banki √°tutal√°s',
      },
      {
        name: 'K√©szp√©nz',
        category: 'transfer',
        description: 'K√©szp√©nzes fizet√©s',
      },
      {
        name: '√Åtvezet√©s',
        category: 'internal',
        description: 'Bels≈ë √°tvezet√©s sz√°ml√°k k√∂z√∂tt',
      },
      {
        name: 'Jutal√©k',
        category: 'income',
        description: 'Jutal√©k vagy b√≥nusz kifizet√©s',
      },
      {
        name: 'Barter',
        category: 'barter',
        description: '√Åru/szolg√°ltat√°s csere',
      },
    ];

    for (const type of transactionTypes) {
      await strapi.entityService.create(
        'api::transaction-type.transaction-type',
        {
          data: type,
        }
      );
    }

    console.log(`‚úÖ Created ${transactionTypes.length} transaction types`);
  } else {
    console.log('üí∞ Transaction types already exist, skipping...');
  }
}

async function seedAccountCategories(strapi) {
  const existingCategories = await strapi.entityService.findMany(
    'api::account-category.account-category'
  );

  if (existingCategories.length === 0) {
    console.log('üìä Seeding Account Categories...');

    const accountCategories = [
      {
        name: 'Bev√©tel',
        type: 'revenue',
        description: 'Bev√©teli √©s j√∂vedelmi sz√°ml√°k',
        color: '#10B981', // Green
      },
      {
        name: 'K√∂lts√©g',
        type: 'expense',
        description: 'K√∂lts√©g- √©s r√°ford√≠t√°si sz√°ml√°k',
        color: '#EF4444', // Red
      },
      {
        name: 'Eszk√∂z',
        type: 'asset',
        description: 'Eszk√∂z- √©s vagyonsz√°ml√°k',
        color: '#3B82F6', // Blue
      },
      {
        name: 'K√∂telezetts√©g',
        type: 'liability',
        description: 'K√∂telezetts√©g- √©s tartoz√°ssz√°ml√°k',
        color: '#F59E0B', // Yellow
      },
      {
        name: 'T≈ëke',
        type: 'equity',
        description: 'T≈ëke- √©s saj√°t t≈ëkesz√°ml√°k',
        color: '#8B5CF6', // Purple
      },
    ];

    for (const category of accountCategories) {
      await strapi.entityService.create(
        'api::account-category.account-category',
        {
          data: category,
        }
      );
    }

    console.log(`‚úÖ Created ${accountCategories.length} account categories`);
  } else {
    console.log('üìä Account categories already exist, skipping...');
  }
}

async function seedCurrencyCategories(strapi) {
  const existingCategories = await strapi.entityService.findMany(
    'api::currency-category.currency-category'
  );

  if (existingCategories.length === 0) {
    console.log('üí± Seeding Currency Categories...');

    const currencyCategories = [
      {
        code: 'CASH',
        name: 'P√©nz',
        description: 'Hagyom√°nyos p√©nz√ºgyi eszk√∂z√∂k',
        icon: 'üí∞',
        color: '#10B981',
      },
      {
        code: 'LABOUR',
        name: 'Munka',
        description: 'Id≈ë- √©s munkalap√∫ eszk√∂z√∂k',
        icon: '‚è∞',
        color: '#3B82F6',
      },
      {
        code: 'RESOURCES',
        name: 'Er≈ëforr√°s',
        description: 'Fizikai √°ruk √©s anyagok',
        icon: 'üåæ',
        color: '#F59E0B',
      },
      {
        code: 'ASSETS',
        name: 'Vagyon',
        description: 'Ingatlan √©s berendez√©sek',
        icon: 'üè†',
        color: '#8B5CF6',
      },
    ];

    for (const category of currencyCategories) {
      await strapi.entityService.create(
        'api::currency-category.currency-category',
        {
          data: category,
        }
      );
    }

    console.log(`‚úÖ Created ${currencyCategories.length} currency categories`);
  } else {
    console.log('üí± Currency categories already exist, skipping...');
  }
}

async function seedCurrencyTypes(strapi) {
  const existingCurrencies = await strapi.entityService.findMany(
    'api::currency-type.currency-type'
  );

  if (existingCurrencies.length === 0) {
    console.log('üí± Seeding Currency Types...');

    // Get currency categories first
    const cashCategory = await strapi.entityService.findMany(
      'api::currency-category.currency-category',
      { filters: { code: 'CASH' } }
    );
    const laborCategory = await strapi.entityService.findMany(
      'api::currency-category.currency-category',
      { filters: { code: 'LABOUR' } }
    );

    const currencyTypes = [
      {
        code: 'HUF',
        name: 'Magyar Forint',
        category: cashCategory[0]?.id,
        unit: 'HUF',
      },
      {
        code: 'EUR',
        name: 'Euro',
        category: cashCategory[0]?.id,
        unit: 'EUR',
      },
      {
        code: 'HOUR',
        name: 'emberi munka√≥ra',
        category: laborCategory[0]?.id,
        unit: 'hour',
      },
    ];

    for (const currency of currencyTypes) {
      await strapi.entityService.create('api::currency-type.currency-type', {
        data: currency,
      });
    }

    console.log(`‚úÖ Created ${currencyTypes.length} currency types`);
  } else {
    console.log('üí± Currency types already exist, skipping...');
  }
}
