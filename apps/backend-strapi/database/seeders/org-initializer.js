'use strict';

/**
 * Organization Initializer
 * Creates organization structure with child organizations and accounts
 */

module.exports = {
  async initialize({
    strapi,
    organizationName,
    childOrgLevel = 0,
    seedAccounts = false,
  }) {
    console.log('üè¢ Starting organization initialization...');

    try {
      // Create main organization
      const organization = await createMainOrganization(
        strapi,
        organizationName
      );

      // Create child organizations based on level
      if (childOrgLevel > 0) {
        await createChildOrganizations(strapi, organization.id, childOrgLevel);
      }

      // Seed accounts if requested
      if (seedAccounts) {
        await seedOrganizationAccounts(strapi, organization.id);
      }

      console.log('‚úÖ Organization initialization completed successfully!');
      return organization;
    } catch (error) {
      console.error('‚ùå Error during organization initialization:', error);
      throw error;
    }
  },
};

async function createMainOrganization(strapi, name) {
  console.log('üè¢ Creating main organization...');

  const existingOrg = await strapi.entityService.findMany(
    'api::organization.organization',
    { filters: { name } }
  );

  if (existingOrg.length > 0) {
    console.log(`üè¢ Organization "${name}" already exists, using existing...`);
    return existingOrg[0];
  }

  const organization = await strapi.entityService.create(
    'api::organization.organization',
    {
      data: {
        name,
        description: '',
        address: '',
      },
    }
  );

  console.log(`‚úÖ Created organization: ${organization.name}`);
  return organization;
}

async function createChildOrganizations(strapi, parentOrgId, level) {
  console.log(`üè¢ Creating child organizations (level ${level})...`);

  const childOrganizations = getChildOrganizationsByLevel(level);
  let totalCreated = 0;

  for (const childOrg of childOrganizations) {
    totalCreated += await createOrganizationRecursively(
      strapi,
      childOrg,
      parentOrgId
    );
  }

  console.log(`‚úÖ Created ${totalCreated} child organizations`);
}

async function createOrganizationRecursively(strapi, orgData, parentId) {
  // Create the current organization
  const createdOrg = await strapi.entityService.create(
    'api::organization.organization',
    {
      data: {
        name: orgData.name,
        description: orgData.description || '',
        address: '',
        parent: parentId,
      },
    }
  );

  let count = 1; // Count this organization

  // Create children recursively if they exist
  if (orgData.children && orgData.children.length > 0) {
    for (const child of orgData.children) {
      count += await createOrganizationRecursively(
        strapi,
        child,
        createdOrg.id
      );
    }
  }

  return count;
}

/**
 * Get child organizations by level
 * @param {number} level - The level of the child organizations
 * @returns {Array} - The child organizations
 * Child Organizations:
 */
function getChildOrganizationsByLevel(level) {
  const hierarchicalOrgs = level > 0 && [
    // Level 0 - Vezet√©s
    {
      name: 'I/0. Vezet√©s',
      description: 'F≈ëvezet√©s √©s ir√°ny√≠t√°s',
      children: level > 1 && [
        {
          name: 'I/0.1 Alap√≠t√≥(k)',
          description: 'Alap√≠t√≥k √©s tulajdonosok',
        },
        {
          name: 'I/0.19 K√ºls≈ë kapcsolati igazgat√°s',
          description: 'K√ºls≈ë kapcsolatok kezel√©se',
        },
        {
          name: 'I/0.20 Operat√≠v vezet√©s',
          description: 'Napi m≈±k√∂d√©s ir√°ny√≠t√°sa',
        },
      ],
    },

    // Level 1 - K√∂zpontok
    {
      name: 'I/1. Kommunik√°ci√≥s Igazgat√≥s√°g',
      description: 'Kommunik√°ci√≥ √©s kapcsolattart√°s',
      children: level > 1 && [
        {
          name: 'I/1.1 Ir√°ny√≠t√°s √©s szem√©lyzeti k√∂zpont',
          description: 'Szem√©lyzeti √ºgyek',
        },
        {
          name: 'I/1.2 Kommunik√°ci√≥s k√∂zpont',
          description: 'Kommunik√°ci√≥s feladatok',
          children: level > 2 && [
            {
              name: 'I/1.2.2 Kimen≈ë kommunik√°ci√≥s k√∂zpont',
              description: 'K√ºls≈ë kommunik√°ci√≥',
            },
            {
              name: 'I/1.2.3 Bels≈ë kommunik√°ci√≥s k√∂zpont',
              description: 'Bels≈ë kommunik√°ci√≥',
            },
          ],
        },
        {
          name: 'I/1.3 Vizsg√°latok √©s jelent√©sek',
          description: 'Elemz√©sek √©s jelent√©sek',
        },
      ],
    },

    {
      name: 'I/2. Marketing Igazgat√≥s√°g',
      description: 'Marketing √©s prom√≥ci√≥',
      children: level > 1 && [
        {
          name: 'I/2.4 Prom√≥ci√≥ √©s marketing igazgat√≥s√°g',
          description: 'Marketing strat√©gi√°k',
        },
        {
          name: 'I/2.5 Kiadv√°nyok',
          description: 'Kiad√≥i tev√©kenys√©g',
        },
        {
          name: 'I/2.6 Regisztr√°ci√≥s k√∂zpont',
          description: 'Regisztr√°ci√≥s feladatok',
        },
      ],
    },

    {
      name: 'I/3. P√©nz√ºgyi Igazgat√≥s√°g',
      description: 'P√©nz√ºgyi √ºgyek kezel√©se',
      children: level > 1 && [
        {
          name: 'I/3.7 Bev√©teli k√∂zpont',
          description: 'Bev√©telek kezel√©se',
        },
        {
          name: 'I/3.8 Kifizet√©si k√∂zpont',
          description: 'Kifizet√©sek kezel√©se',
        },
        {
          name: 'I/3.9 Nyilv√°ntart√°sok, vagyont√°rgyak',
          description: 'Vagyonkezel√©s',
        },
      ],
    },

    {
      name: 'I/4. Termel√©si Igazgat√≥s√°g',
      description: 'Termel√©s ir√°ny√≠t√°sa',
      children: level > 1 && [
        {
          name: 'I/4.10 Tervez√©si k√∂zpont',
          description: 'Tervez√©si feladatok',
        },
        {
          name: 'I/4.11 Ter√ºlet kialak√≠t√°s',
          description: 'Ter√ºletfejleszt√©s',
        },
        {
          name: 'I/4.12 Termel√©s ir√°ny√≠t√°sa',
          description: 'Termel√©sir√°ny√≠t√°s',
          children: level > 2 && [
            {
              name: 'I/4.12.1 Mez≈ë- √©s erd≈ëgazd√°lkod√°s',
              description: 'Mez≈ëgazdas√°gi √©s erd√©szeti tev√©kenys√©g',
            },
          ],
        },
      ],
    },

    {
      name: 'I/5. Min≈ës√©gfel√ºgyeleti Igazgat√≥s√°g',
      description: 'Min≈ës√©g √©s ellen≈ërz√©s',
      children: level > 1 && [
        {
          name: 'I/5.13 √ârv√©nyes√≠t√©s',
          description: '√ârv√©nyes√≠t√©si feladatok',
        },
        {
          name: 'I/5.14 Munkat√°rs fejleszt√©s',
          description: 'Szem√©lyzetfejleszt√©s',
        },
        {
          name: 'I/5.15 Korrekci√≥s k√∂zpont',
          description: 'Hibaelh√°r√≠t√°s',
        },
      ],
    },

    {
      name: 'I/6. Terjeszt√©si Igazgat√≥s√°g',
      description: 'Terjeszt√©s √©s logisztika',
      children: level > 1 && [
        {
          name: 'I/6.16 Kapcsolatfelv√©tel',
          description: '√öj kapcsolatok √©p√≠t√©se',
        },
        {
          name: 'I/6.17 Ter√ºleti t√°mogat√°s',
          description: 'Ter√ºleti t√°mogat√°s',
        },
        {
          name: 'I/6.18 Ter√ºletek fel√ºgyelete',
          description: 'Ter√ºletfel√ºgyelet',
        },
      ],
    },
  ];

  return hierarchicalOrgs;
}

async function seedOrganizationAccounts(strapi, organizationId) {
  console.log('üí∞ Seeding organization accounts...');

  // Get account categories first
  const accountCategories = await strapi.entityService.findMany(
    'api::account-category.account-category'
  );

  const categoryMap = {};
  accountCategories.forEach((cat) => {
    categoryMap[cat.type] = cat.id;
  });

  const accounts = [
    // Bev√©teli sz√°ml√°k (Revenue)
    { name: 'Term√©k√©rt√©kes√≠t√©s', code: '400', category: categoryMap.revenue },
    {
      name: 'Szolg√°ltat√°s√©rt√©kes√≠t√©s',
      code: '401',
      category: categoryMap.revenue,
    },
    { name: 'B√©rbead√°s bev√©tele', code: '402', category: categoryMap.revenue },
    { name: 'P√©nz√ºgyi bev√©telek', code: '403', category: categoryMap.revenue },
    { name: 'Egy√©b bev√©telek', code: '404', category: categoryMap.revenue },

    // K√∂lts√©gsz√°ml√°k (Expense)
    { name: 'Anyagk√∂lts√©g', code: '500', category: categoryMap.expense },
    { name: 'B√©rk√∂lts√©g', code: '501', category: categoryMap.expense },
    {
      name: 'T√°rsadalombiztos√≠t√°si k√∂lts√©g',
      code: '502',
      category: categoryMap.expense,
    },
    { name: 'Rezsik√∂lts√©g', code: '503', category: categoryMap.expense },
    { name: 'Sz√°ll√≠t√≥k√∂lts√©g', code: '504', category: categoryMap.expense },
    {
      name: '√ârt√©kes√≠t√©si k√∂lts√©g',
      code: '505',
      category: categoryMap.expense,
    },
    { name: '√Åltal√°nos k√∂lts√©g', code: '506', category: categoryMap.expense },
    { name: 'P√©nz√ºgyi k√∂lts√©g', code: '507', category: categoryMap.expense },

    // Eszk√∂zsz√°ml√°k (Asset)
    { name: 'K√©szp√©nz', code: '100', category: categoryMap.asset },
    { name: 'Banksz√°mla', code: '101', category: categoryMap.asset },
    { name: 'K√∂vetel√©sek', code: '102', category: categoryMap.asset },
    { name: 'K√©szlet', code: '103', category: categoryMap.asset },
    { name: 'Berendez√©sek', code: '104', category: categoryMap.asset },
    { name: 'Ingatlanok', code: '105', category: categoryMap.asset },

    // K√∂telezetts√©gsz√°ml√°k (Liability)
    { name: 'Tartoz√°sok', code: '200', category: categoryMap.liability },
    { name: 'Ad√≥tartoz√°sok', code: '201', category: categoryMap.liability },
    { name: 'B√©rtartoz√°sok', code: '202', category: categoryMap.liability },
    {
      name: 'Hossz√∫ lej√°rat√∫ k√∂telezetts√©gek',
      code: '203',
      category: categoryMap.liability,
    },

    // T≈ëkesz√°ml√°k (Equity)
    { name: 'Alapt≈ëke', code: '300', category: categoryMap.equity },
    { name: 'Tartal√©kok', code: '301', category: categoryMap.equity },
    { name: 'Eredm√©nytartal√©k', code: '302', category: categoryMap.equity },
  ];

  for (const account of accounts) {
    await strapi.entityService.create('api::account.account', {
      data: {
        ...account,
        organization: organizationId,
        description: `${account.name} sz√°mla`,
      },
    });
  }

  console.log(`‚úÖ Created ${accounts.length} accounts for organization`);
}
