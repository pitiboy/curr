'use strict';

/**
 * Organization Initializer
 * Creates organization structure with child organizations and accounts
 */

module.exports = {
  async initialize({
    strapi,
    organizationName,
    childOrgLevel = 0,
    seedAccounts = false,
  }) {
    console.log('üè¢ Starting organization initialization...');

    try {
      // Create main organization
      const organization = await createMainOrganization(
        strapi,
        organizationName
      );

      // Create child organizations based on level
      if (childOrgLevel > 0) {
        await createChildOrganizations(strapi, organization.id, childOrgLevel);
      }

      // Seed accounts if requested
      if (seedAccounts) {
        await seedOrganizationAccounts(strapi, organization.id);
      }

      console.log('‚úÖ Organization initialization completed successfully!');
      return organization;
    } catch (error) {
      console.error('‚ùå Error during organization initialization:', error);
      throw error;
    }
  },
};

async function createMainOrganization(strapi, name) {
  console.log('üè¢ Creating main organization...');

  const existingOrg = await strapi.entityService.findMany(
    'api::organization.organization',
    { filters: { name } }
  );

  if (existingOrg.length > 0) {
    console.log(`üè¢ Organization "${name}" already exists, using existing...`);
    return existingOrg[0];
  }

  const organization = await strapi.entityService.create(
    'api::organization.organization',
    {
      data: {
        name,
        description: '',
        address: '',
      },
    }
  );

  console.log(`‚úÖ Created organization: ${organization.name}`);
  return organization;
}

async function createChildOrganizations(strapi, parentOrgId, level) {
  console.log(`üè¢ Creating child organizations (level ${level})...`);

  const childOrganizations = getChildOrganizationsByLevel(level);

  for (const childOrg of childOrganizations) {
    await strapi.entityService.create('api::organization.organization', {
      data: {
        name: childOrg.name,
        description: childOrg.description || '',
        address: '',
        parent: parentOrgId,
      },
    });
  }

  console.log(`‚úÖ Created ${childOrganizations.length} child organizations`);
}

/**
 * Get child organizations by level
 * @param {number} level - The level of the child organizations
 * @returns {Array} - The child organizations
 * Child Organizations:
0. Vezet√©s 
0.1 Alap√≠t√≥(k)
0.19 K√úLKAPCSOLATI IGAZGAT√ÅS
0.20 OPERAT√çV VEZET√âS
1. Kommunik√°ci√≥s K√∂zpont
1.1. IR√ÅNY√çT√ÅS √âS SZEM√âLYZETI K√ñZPONT
1.2. KOMMUNIK√ÅCI√ìS K√ñZPONT
1.2.2 KIMEN≈ê KOMMUNIK√ÅCI√ìS K√ñZPONT
1.2.3 BELS≈ê KOMMUNIK√ÅCI√ìS K√ñZPONT
1.3 VIZSG√ÅLATOK √âS JELENT√âSEK
2. Marketing K√∂zpont
2.4 PROM√ìCI√ì √âS MARKETING IGAZGAT√ìS√ÅG
2.5 KIADV√ÅNYOK
2.6. REGISZTR√ÅCI√ìS K√ñZPONT
3. P√©nz√ºgyi K√∂zpont
3.7 BEV√âTELI K√ñZPONT
3.8 KIFIZET√âSI K√ñZPONT
3.9 NYILV√ÅNTART√ÅSOK, VAGYONT√ÅRGYAK
4. Termel√©si K√∂zpont
4.10 TERVEZ√âSI K√ñZPONT
4.11 TER√úLET KIALAK√çT√ÅS
4.12 TERMEL√âS IR√ÅNY√çT√ÅS
4.12.1 MEZ≈ê- √âS ERD≈êGAZD√ÅLKOD√ÅS
5. Min≈ës√©gfel√ºgyeleti K√∂zpont
5.13 √âRV√âNYES√çT√âS
5.14 MUNKAT√ÅRS FEJLESZT√âS
5.15 KORREKCI√ìS K√ñZPONT
6. Terjeszt√©si K√∂zpont
6.16 KAPCSOLATFELV√âTEL
6.17 TER√úLETI T√ÅMOGAT√ÅS
6.18 TER√úLETEK FEL√úGYELETE
 */
function getChildOrganizationsByLevel(level) {
  const allChildOrgs = [
    // Level 0 - Vezet√©s
    { name: 'Vezet√©s', description: 'F≈ëvezet√©s √©s ir√°ny√≠t√°s' },
    { name: 'Alap√≠t√≥(k)', description: 'Alap√≠t√≥k √©s tulajdonosok' },
    {
      name: 'K√úLKAPCSOLATI IGAZGAT√ÅS',
      description: 'K√ºls≈ë kapcsolatok kezel√©se',
    },
    { name: 'OPERAT√çV VEZET√âS', description: 'Napi m≈±k√∂d√©s ir√°ny√≠t√°sa' },

    // Level 1 - K√∂zpontok
    {
      name: 'Kommunik√°ci√≥s K√∂zpont',
      description: 'Kommunik√°ci√≥ √©s kapcsolattart√°s',
    },
    { name: 'Marketing K√∂zpont', description: 'Marketing √©s prom√≥ci√≥' },
    { name: 'P√©nz√ºgyi K√∂zpont', description: 'P√©nz√ºgyi √ºgyek kezel√©se' },
    { name: 'Termel√©si K√∂zpont', description: 'Termel√©s ir√°ny√≠t√°sa' },
    {
      name: 'Min≈ës√©gfel√ºgyeleti K√∂zpont',
      description: 'Min≈ës√©g √©s ellen≈ërz√©s',
    },
    { name: 'Terjeszt√©si K√∂zpont', description: 'Terjeszt√©s √©s logisztika' },

    // Level 2 - R√©szlegek
    {
      name: 'IR√ÅNY√çT√ÅS √âS SZEM√âLYZETI K√ñZPONT',
      description: 'Szem√©lyzeti √ºgyek',
    },
    { name: 'KOMMUNIK√ÅCI√ìS K√ñZPONT', description: 'Kommunik√°ci√≥s feladatok' },
    { name: 'KIMEN≈ê KOMMUNIK√ÅCI√ìS K√ñZPONT', description: 'K√ºls≈ë kommunik√°ci√≥' },
    { name: 'BELS≈ê KOMMUNIK√ÅCI√ìS K√ñZPONT', description: 'Bels≈ë kommunik√°ci√≥' },
    {
      name: 'VIZSG√ÅLATOK √âS JELENT√âSEK',
      description: 'Elemz√©sek √©s jelent√©sek',
    },
    {
      name: 'PROM√ìCI√ì √âS MARKETING IGAZGAT√ìS√ÅG',
      description: 'Marketing strat√©gi√°k',
    },
    { name: 'KIADV√ÅNYOK', description: 'Kiad√≥i tev√©kenys√©g' },
    { name: 'REGISZTR√ÅCI√ìS K√ñZPONT', description: 'Regisztr√°ci√≥s feladatok' },
    { name: 'BEV√âTELI K√ñZPONT', description: 'Bev√©telek kezel√©se' },
    { name: 'KIFIZET√âSI K√ñZPONT', description: 'Kifizet√©sek kezel√©se' },
    { name: 'NYILV√ÅNTART√ÅSOK, VAGYONT√ÅRGYAK', description: 'Vagyonkezel√©s' },
    { name: 'TERVEZ√âSI K√ñZPONT', description: 'Tervez√©si feladatok' },
    { name: 'TER√úLET KIALAK√çT√ÅS', description: 'Ter√ºletfejleszt√©s' },
    { name: 'TERMEL√âS IR√ÅNY√çT√ÅS', description: 'Termel√©sir√°ny√≠t√°s' },
    { name: '√âRV√âNYES√çT√âS', description: '√ârv√©nyes√≠t√©si feladatok' },
    { name: 'MUNKAT√ÅRS FEJLESZT√âS', description: 'Szem√©lyzetfejleszt√©s' },
    { name: 'KORREKCI√ìS K√ñZPONT', description: 'Hibaelh√°r√≠t√°s' },
    { name: 'KAPCSOLATFELV√âTEL', description: '√öj kapcsolatok √©p√≠t√©se' },
    { name: 'TER√úLETI T√ÅMOGAT√ÅS', description: 'Ter√ºleti t√°mogat√°s' },
    { name: 'TER√úLETEK FEL√úGYELETE', description: 'Ter√ºletfel√ºgyelet' },

    // Level 3 - R√©szletes r√©szlegek
    {
      name: 'MEZ≈ê- √âS ERD≈êGAZD√ÅLKOD√ÅS',
      description: 'Mez≈ëgazdas√°gi √©s erd√©szeti tev√©kenys√©g',
    },
  ];

  // Return organizations based on level
  switch (level) {
    case 1:
      return allChildOrgs.slice(0, 4); // Vezet√©s level
    case 2:
      return allChildOrgs.slice(0, 10); // Vezet√©s + K√∂zpontok
    case 3:
      return allChildOrgs; // All levels
    default:
      return [];
  }
}

async function seedOrganizationAccounts(strapi, organizationId) {
  console.log('üí∞ Seeding organization accounts...');

  // Get account categories first
  const accountCategories = await strapi.entityService.findMany(
    'api::account-category.account-category'
  );

  const categoryMap = {};
  accountCategories.forEach((cat) => {
    categoryMap[cat.type] = cat.id;
  });

  const accounts = [
    // Bev√©teli sz√°ml√°k (Revenue)
    { name: 'Term√©k√©rt√©kes√≠t√©s', code: '400', category: categoryMap.revenue },
    {
      name: 'Szolg√°ltat√°s√©rt√©kes√≠t√©s',
      code: '401',
      category: categoryMap.revenue,
    },
    { name: 'B√©rbead√°s bev√©tele', code: '402', category: categoryMap.revenue },
    { name: 'P√©nz√ºgyi bev√©telek', code: '403', category: categoryMap.revenue },
    { name: 'Egy√©b bev√©telek', code: '404', category: categoryMap.revenue },

    // K√∂lts√©gsz√°ml√°k (Expense)
    { name: 'Anyagk√∂lts√©g', code: '500', category: categoryMap.expense },
    { name: 'B√©rk√∂lts√©g', code: '501', category: categoryMap.expense },
    {
      name: 'T√°rsadalombiztos√≠t√°si k√∂lts√©g',
      code: '502',
      category: categoryMap.expense,
    },
    { name: 'Rezsik√∂lts√©g', code: '503', category: categoryMap.expense },
    { name: 'Sz√°ll√≠t√≥k√∂lts√©g', code: '504', category: categoryMap.expense },
    {
      name: '√ârt√©kes√≠t√©si k√∂lts√©g',
      code: '505',
      category: categoryMap.expense,
    },
    { name: '√Åltal√°nos k√∂lts√©g', code: '506', category: categoryMap.expense },
    { name: 'P√©nz√ºgyi k√∂lts√©g', code: '507', category: categoryMap.expense },

    // Eszk√∂zsz√°ml√°k (Asset)
    { name: 'K√©szp√©nz', code: '100', category: categoryMap.asset },
    { name: 'Banksz√°mla', code: '101', category: categoryMap.asset },
    { name: 'K√∂vetel√©sek', code: '102', category: categoryMap.asset },
    { name: 'K√©szlet', code: '103', category: categoryMap.asset },
    { name: 'Berendez√©sek', code: '104', category: categoryMap.asset },
    { name: 'Ingatlanok', code: '105', category: categoryMap.asset },

    // K√∂telezetts√©gsz√°ml√°k (Liability)
    { name: 'Tartoz√°sok', code: '200', category: categoryMap.liability },
    { name: 'Ad√≥tartoz√°sok', code: '201', category: categoryMap.liability },
    { name: 'B√©rtartoz√°sok', code: '202', category: categoryMap.liability },
    {
      name: 'Hossz√∫ lej√°rat√∫ k√∂telezetts√©gek',
      code: '203',
      category: categoryMap.liability,
    },

    // T≈ëkesz√°ml√°k (Equity)
    { name: 'Alapt≈ëke', code: '300', category: categoryMap.equity },
    { name: 'Tartal√©kok', code: '301', category: categoryMap.equity },
    { name: 'Eredm√©nytartal√©k', code: '302', category: categoryMap.equity },
  ];

  for (const account of accounts) {
    await strapi.entityService.create('api::account.account', {
      data: {
        ...account,
        organization: organizationId,
        description: `${account.name} sz√°mla`,
      },
    });
  }

  console.log(`‚úÖ Created ${accounts.length} accounts for organization`);
}
